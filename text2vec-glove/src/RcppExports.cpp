// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// create_xptr_unordered_set
SEXP create_xptr_unordered_set(CharacterVector x);
RcppExport SEXP text2vec_create_xptr_unordered_set(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xptr_unordered_set(x));
    return rcpp_result_gen;
END_RCPP
}
// collapse_collocations_cpp
ListOf<CharacterVector> collapse_collocations_cpp(const ListOf<const CharacterVector>& docs, SEXP xptr_unordered_set, const String r_sep);
RcppExport SEXP text2vec_collapse_collocations_cpp(SEXP docsSEXP, SEXP xptr_unordered_setSEXP, SEXP r_sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector>& >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xptr_unordered_set(xptr_unordered_setSEXP);
    Rcpp::traits::input_parameter< const String >::type r_sep(r_sepSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_collocations_cpp(docs, xptr_unordered_set, r_sep));
    return rcpp_result_gen;
END_RCPP
}
// cpp_glove_create
SEXP cpp_glove_create(const List& params);
RcppExport SEXP text2vec_cpp_glove_create(SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_glove_create(params));
    return rcpp_result_gen;
END_RCPP
}
// cpp_glove_get_word_vectors
NumericMatrix cpp_glove_get_word_vectors(SEXP ptr);
RcppExport SEXP text2vec_cpp_glove_get_word_vectors(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_glove_get_word_vectors(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_glove_set_cost_zero
void cpp_glove_set_cost_zero(SEXP ptr);
RcppExport SEXP text2vec_cpp_glove_set_cost_zero(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    cpp_glove_set_cost_zero(ptr);
    return R_NilValue;
END_RCPP
}
// cpp_glove_partial_fit
double cpp_glove_partial_fit(SEXP ptr, const IntegerVector x_irow, const IntegerVector x_icol, const NumericVector x_val, const IntegerVector iter_order);
RcppExport SEXP text2vec_cpp_glove_partial_fit(SEXP ptrSEXP, SEXP x_irowSEXP, SEXP x_icolSEXP, SEXP x_valSEXP, SEXP iter_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type x_irow(x_irowSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type x_icol(x_icolSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type iter_order(iter_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_glove_partial_fit(ptr, x_irow, x_icol, x_val, iter_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_glove_get_sparsity_level
double cpp_glove_get_sparsity_level(SEXP ptr);
RcppExport SEXP text2vec_cpp_glove_get_sparsity_level(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_glove_get_sparsity_level(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_glove_dump_model
List cpp_glove_dump_model(SEXP ptr);
RcppExport SEXP text2vec_cpp_glove_dump_model(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_glove_dump_model(ptr));
    return rcpp_result_gen;
END_RCPP
}
// hasher
IntegerVector hasher(CharacterVector x, int hash_size);
RcppExport SEXP text2vec_hasher(SEXP xSEXP, SEXP hash_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type hash_size(hash_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(hasher(x, hash_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hash_corpus_create
SEXP cpp_hash_corpus_create(uint32_t size, uint32_t n_min, uint32_t n_max, int use_signed_hash);
RcppExport SEXP text2vec_cpp_hash_corpus_create(SEXP sizeSEXP, SEXP n_minSEXP, SEXP n_maxSEXP, SEXP use_signed_hashSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint32_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_min(n_minSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_max(n_maxSEXP);
    Rcpp::traits::input_parameter< int >::type use_signed_hash(use_signed_hashSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hash_corpus_create(size, n_min, n_max, use_signed_hash));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hash_corpus_insert_document_batch
void cpp_hash_corpus_insert_document_batch(SEXP ptr, const ListOf<const CharacterVector>& docs_batch, int grow_dtm, int context, uint32_t window_size, const NumericVector& weights);
RcppExport SEXP text2vec_cpp_hash_corpus_insert_document_batch(SEXP ptrSEXP, SEXP docs_batchSEXP, SEXP grow_dtmSEXP, SEXP contextSEXP, SEXP window_sizeSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector>& >::type docs_batch(docs_batchSEXP);
    Rcpp::traits::input_parameter< int >::type grow_dtm(grow_dtmSEXP);
    Rcpp::traits::input_parameter< int >::type context(contextSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    cpp_hash_corpus_insert_document_batch(ptr, docs_batch, grow_dtm, context, window_size, weights);
    return R_NilValue;
END_RCPP
}
// cpp_hash_corpus_get_tcm
S4 cpp_hash_corpus_get_tcm(SEXP ptr);
RcppExport SEXP text2vec_cpp_hash_corpus_get_tcm(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hash_corpus_get_tcm(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hash_corpus_get_dtm
S4 cpp_hash_corpus_get_dtm(SEXP ptr);
RcppExport SEXP text2vec_cpp_hash_corpus_get_dtm(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hash_corpus_get_dtm(ptr));
    return rcpp_result_gen;
END_RCPP
}
// colMins
NumericVector colMins(const NumericMatrix x);
RcppExport SEXP text2vec_colMins(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colMins(x));
    return rcpp_result_gen;
END_RCPP
}
// colMaxs
NumericVector colMaxs(const NumericMatrix x);
RcppExport SEXP text2vec_colMaxs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colMaxs(x));
    return rcpp_result_gen;
END_RCPP
}
// rowMins
NumericVector rowMins(const NumericMatrix x);
RcppExport SEXP text2vec_rowMins(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMins(x));
    return rcpp_result_gen;
END_RCPP
}
// rowMaxs
NumericVector rowMaxs(const NumericMatrix x);
RcppExport SEXP text2vec_rowMaxs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMaxs(x));
    return rcpp_result_gen;
END_RCPP
}
// euclidean_dist
NumericMatrix euclidean_dist(const NumericMatrix x, const NumericMatrix y);
RcppExport SEXP text2vec_euclidean_dist(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean_dist(x, y));
    return rcpp_result_gen;
END_RCPP
}
// is_invalid_ptr
int is_invalid_ptr(SEXP sexp_ptr);
RcppExport SEXP text2vec_is_invalid_ptr(SEXP sexp_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp_ptr(sexp_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(is_invalid_ptr(sexp_ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vocabulary_corpus_create
SEXP cpp_vocabulary_corpus_create(const CharacterVector vocab_R, uint32_t n_min, uint32_t n_max, const CharacterVector stopwords_R, const String delim);
RcppExport SEXP text2vec_cpp_vocabulary_corpus_create(SEXP vocab_RSEXP, SEXP n_minSEXP, SEXP n_maxSEXP, SEXP stopwords_RSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type vocab_R(vocab_RSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_min(n_minSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_max(n_maxSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type stopwords_R(stopwords_RSEXP);
    Rcpp::traits::input_parameter< const String >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vocabulary_corpus_create(vocab_R, n_min, n_max, stopwords_R, delim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vocabulary_corpus_insert_document_batch
void cpp_vocabulary_corpus_insert_document_batch(SEXP ptr, const ListOf<const CharacterVector>& docs_batch, int grow_dtm, int context, uint32_t window_size, const NumericVector& weights);
RcppExport SEXP text2vec_cpp_vocabulary_corpus_insert_document_batch(SEXP ptrSEXP, SEXP docs_batchSEXP, SEXP grow_dtmSEXP, SEXP contextSEXP, SEXP window_sizeSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector>& >::type docs_batch(docs_batchSEXP);
    Rcpp::traits::input_parameter< int >::type grow_dtm(grow_dtmSEXP);
    Rcpp::traits::input_parameter< int >::type context(contextSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    cpp_vocabulary_corpus_insert_document_batch(ptr, docs_batch, grow_dtm, context, window_size, weights);
    return R_NilValue;
END_RCPP
}
// cpp_vocabulary_corpus_get_tcm
S4 cpp_vocabulary_corpus_get_tcm(SEXP ptr);
RcppExport SEXP text2vec_cpp_vocabulary_corpus_get_tcm(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vocabulary_corpus_get_tcm(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vocabulary_corpus_get_dtm
S4 cpp_vocabulary_corpus_get_dtm(SEXP ptr);
RcppExport SEXP text2vec_cpp_vocabulary_corpus_get_dtm(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vocabulary_corpus_get_dtm(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vocab_create
SEXP cpp_vocab_create(uint32_t ngram_min, uint32_t ngram_max, const CharacterVector stopwords_R, const String delim);
RcppExport SEXP text2vec_cpp_vocab_create(SEXP ngram_minSEXP, SEXP ngram_maxSEXP, SEXP stopwords_RSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint32_t >::type ngram_min(ngram_minSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type ngram_max(ngram_maxSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type stopwords_R(stopwords_RSEXP);
    Rcpp::traits::input_parameter< const String >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vocab_create(ngram_min, ngram_max, stopwords_R, delim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vocabulary_insert_document_batch
void cpp_vocabulary_insert_document_batch(SEXP ptr, const ListOf<const CharacterVector> document_batch);
RcppExport SEXP text2vec_cpp_vocabulary_insert_document_batch(SEXP ptrSEXP, SEXP document_batchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const ListOf<const CharacterVector> >::type document_batch(document_batchSEXP);
    cpp_vocabulary_insert_document_batch(ptr, document_batch);
    return R_NilValue;
END_RCPP
}
// cpp_get_vocab_statistics
DataFrame cpp_get_vocab_statistics(SEXP ptr);
RcppExport SEXP text2vec_cpp_get_vocab_statistics(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_vocab_statistics(ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_document_count
int cpp_get_document_count(SEXP ptr);
RcppExport SEXP text2vec_cpp_get_document_count(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_document_count(ptr));
    return rcpp_result_gen;
END_RCPP
}
// warplda_create
SEXP warplda_create(int n_topics, double doc_topic_prior, double topic_word_prior);
RcppExport SEXP text2vec_warplda_create(SEXP n_topicsSEXP, SEXP doc_topic_priorSEXP, SEXP topic_word_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_topics(n_topicsSEXP);
    Rcpp::traits::input_parameter< double >::type doc_topic_prior(doc_topic_priorSEXP);
    Rcpp::traits::input_parameter< double >::type topic_word_prior(topic_word_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(warplda_create(n_topics, doc_topic_prior, topic_word_prior));
    return rcpp_result_gen;
END_RCPP
}
// warplda_init_dtm
void warplda_init_dtm(SEXP ptr, const S4& m, const IntegerVector& z_old, const IntegerVector& z_new);
RcppExport SEXP text2vec_warplda_init_dtm(SEXP ptrSEXP, SEXP mSEXP, SEXP z_oldSEXP, SEXP z_newSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const S4& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type z_old(z_oldSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type z_new(z_newSEXP);
    warplda_init_dtm(ptr, m, z_old, z_new);
    return R_NilValue;
END_RCPP
}
// warplda_set_topic_word_count
void warplda_set_topic_word_count(SEXP ptr, const Rcpp::IntegerMatrix& topic_word_count);
RcppExport SEXP text2vec_warplda_set_topic_word_count(SEXP ptrSEXP, SEXP topic_word_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type topic_word_count(topic_word_countSEXP);
    warplda_set_topic_word_count(ptr, topic_word_count);
    return R_NilValue;
END_RCPP
}
// run_one_iter
double run_one_iter(SEXP ptr, bool update_topics, bool calc_ll);
RcppExport SEXP text2vec_run_one_iter(SEXP ptrSEXP, SEXP update_topicsSEXP, SEXP calc_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type update_topics(update_topicsSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_ll(calc_llSEXP);
    rcpp_result_gen = Rcpp::wrap(run_one_iter(ptr, update_topics, calc_ll));
    return rcpp_result_gen;
END_RCPP
}
// warplda_get_doc_topic_count
IntegerMatrix warplda_get_doc_topic_count(SEXP ptr);
RcppExport SEXP text2vec_warplda_get_doc_topic_count(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(warplda_get_doc_topic_count(ptr));
    return rcpp_result_gen;
END_RCPP
}
// warplda_get_topic_word_count
IntegerMatrix warplda_get_topic_word_count(SEXP ptr);
RcppExport SEXP text2vec_warplda_get_topic_word_count(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(warplda_get_topic_word_count(ptr));
    return rcpp_result_gen;
END_RCPP
}
// warplda_get_c_all_local
IntegerVector warplda_get_c_all_local(SEXP ptr);
RcppExport SEXP text2vec_warplda_get_c_all_local(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(warplda_get_c_all_local(ptr));
    return rcpp_result_gen;
END_RCPP
}
// warplda_get_c_all
IntegerVector warplda_get_c_all(SEXP ptr);
RcppExport SEXP text2vec_warplda_get_c_all(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(warplda_get_c_all(ptr));
    return rcpp_result_gen;
END_RCPP
}
// warplda_set_c_all
void warplda_set_c_all(SEXP ptr, const IntegerVector& c_all);
RcppExport SEXP text2vec_warplda_set_c_all(SEXP ptrSEXP, SEXP c_allSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type c_all(c_allSEXP);
    warplda_set_c_all(ptr, c_all);
    return R_NilValue;
END_RCPP
}
// warplda_reset_c_all_local
void warplda_reset_c_all_local(SEXP ptr);
RcppExport SEXP text2vec_warplda_reset_c_all_local(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    warplda_reset_c_all_local(ptr);
    return R_NilValue;
END_RCPP
}
